name: Appimage
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: "0 6/12 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-hash: ${{ steps.hash.outputs.hash }}
      release-needed: ${{ steps.check-changes.outputs.release-needed }}
    steps:
      - uses: actions/checkout@v3

      - name: build
        if: always()
        run: |
          sudo apt update && sudo apt install desktop-file-utils
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_unconfined=0
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0
          chmod a+x ./*-junest.sh
          ./*-junest.sh
          mkdir dist
          mv *AppImage* dist/

      - name: Calculate artifact hash
        id: hash
        run: |
          cd dist
          hash=$(find . -name "*.AppImage*" -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "hash=$hash" >> $GITHUB_OUTPUT
          echo "Current artifact hash: $hash"

      - name: Check for changes
        id: check-changes
        run: |
          # Get the hash from the last release
          last_hash=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/continuous" \
            | jq -r '.body // ""' | grep -o 'Hash: [a-f0-9]*' | cut -d' ' -f2 || echo "")

          current_hash="${{ steps.hash.outputs.hash }}"

          if [ "$last_hash" != "$current_hash" ] || [ -z "$last_hash" ]; then
            echo "release-needed=true" >> $GITHUB_OUTPUT
            echo "Changes detected or no previous release found. Release needed."
            echo "Previous hash: $last_hash"
            echo "Current hash: $current_hash"
          else
            echo "release-needed=false" >> $GITHUB_OUTPUT
            echo "No changes detected. Skipping release."
          fi

      - name: Add timestamp to AppImage files
        if: steps.check-changes.outputs.release-needed == 'true'
        run: |
          cd dist
          timestamp=$(date +"%Y%m%d_%H%M%S")
          for file in *.AppImage*; do
            if [ -f "$file" ]; then
              # Split filename by dashes
              IFS='-' read -ra PARTS <<< "$file"
              
              # If we have multiple parts separated by dashes
              if [ ${#PARTS[@]} -gt 1 ]; then
                # Reconstruct with timestamp as second-to-last token
                new_name=""
                for ((i=0; i<${#PARTS[@]}-1; i++)); do
                  if [ $i -gt 0 ]; then
                    new_name="${new_name}-"
                  fi
                  new_name="${new_name}${PARTS[$i]}"
                done
                new_name="${new_name}-${timestamp}-${PARTS[-1]}"
                mv "$file" "$new_name"
              else
                # No dashes, just append timestamp
                name="${file%.*}"
                ext="${file##*.}"
                if [ "$name" != "$file" ]; then
                  # File has extension
                  mv "$file" "${name}_${timestamp}.${ext}"
                else
                  # File has no extension
                  mv "$file" "${file}_${timestamp}"
                fi
              fi
            fi
          done
      - name: Upload artifact
        if: steps.check-changes.outputs.release-needed == 'true'
        uses: actions/upload-artifact@v4.4.0
        with:
          name: AppImage
          path: "dist"

  release:
    needs: [build]
    if: needs.build.outputs.release-needed == 'true'
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4.1.8
        with:
          name: AppImage

      - name: Delete previous release
        run: |
          # Check if the release exists and delete it
          release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/continuous" \
            | jq -r '.id // empty')

          if [ ! -z "$release_id" ] && [ "$release_id" != "null" ]; then
            echo "Deleting previous release with ID: $release_id"
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
          else
            echo "No previous release found to delete"
          fi

          # Delete the tag if it exists
          tag_exists=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/continuous" \
            | jq -r '.ref // empty')

          if [ ! -z "$tag_exists" ] && [ "$tag_exists" != "null" ]; then
            echo "Deleting tag: continuous"
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/continuous"
          else
            echo "No tag found to delete"
          fi

      - name: Create release body with hash
        id: release-body
        run: |
          cat > release_body.md << 'EOF'
          Automated release created on ${{ github.event.head_commit.timestamp || github.run_started_at }}

          **Build Information:**
          - Run ID: ${{ github.run_id }}
          - Run Number: ${{ github.run_number }}
          - Commit: ${{ github.sha }}
          - Hash: ${{ needs.build.outputs.artifact-hash }}

          **Files in this release:**
          EOF

          # List all AppImage files
          for file in *.AppImage*; do
            if [ -f "$file" ]; then
              echo "- $file" >> release_body.md
            fi
          done

      - name: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: continuous
          name: "Continuous build - ${{ github.run_number }}"
          body_path: release_body.md
          prerelease: false
          draft: false
          files: |
            *.AppImage*
          token: ${{ secrets.GITHUB_TOKEN }}
